@model LumiTempMVC.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard - Visões Executivas";
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="https://cdn.jsdelivr.net/npm/plotly.js-dist@2.3.0"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        .chart-container {
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }

        .chart {
            width: 48%;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>@ViewData["Title"]</h1>

        <div class="chart-container">
            <!-- Gráfico de Pizza de Empresas por Estado -->
            <div id="empresas-pie-chart" class="chart"></div>

            <!-- Gráfico de Linha de Vendas de Sensores -->
            <div id="vendas-sensores-line-chart" class="chart"></div>

            <!-- Gráfico de Barras de Vendas por Funcionário -->
            <div id="vendas-funcionarios-bar-chart" class="chart"></div>

            <!-- Gráfico de Barras Horizontais Empilhadas -->
            <div id="vendas-tipo-sensores-bar-chart" class="chart"></div>
        </div>

        <script type="text/javascript">
            $(document).ready(function () {
                var empresas = @Html.Raw(Json.Serialize(Model.Empresas));

                // Dados para o gráfico de pizza
                var empresaStates = empresas.map(empresa => empresa.estado_empr);
                var empresaCounts = empresaStates.reduce((acc, state) => {
                    acc[state] = (acc[state] || 0) + 1;
                    return acc;
                }, {});

                var pieData = [{
                    values: Object.values(empresaCounts),
                    labels: Object.keys(empresaCounts),
                    type: 'pie'
                }];

                var pieLayout = {
                    title: 'Quantidade de Empresas por Estado'
                };

                Plotly.newPlot('empresas-pie-chart', pieData, pieLayout);

                // Dados para o gráfico de linha de vendas de sensores
                var sensores = @Html.Raw(Json.Serialize(Model.Sensores));
                var vendasPorDia = sensores.reduce((acc, sensor) => {
                    var date = new Date(sensor.dt_vend).toISOString().split('T')[0];
                    acc[date] = (acc[date] || 0) + 1;
                    return acc;
                }, {});

                var lineData = [{
                    x: Object.keys(vendasPorDia),
                    y: Object.values(vendasPorDia),
                    type: 'scatter',
                    mode: 'lines+markers',
                    line: { shape: 'linear' }
                }];

                var lineLayout = {
                    title: 'Quantidade de Vendas de Sensores por Dia e Mês de Venda',
                    xaxis: { title: 'Data' },
                    yaxis: { title: 'Quantidade' }
                };

                Plotly.newPlot('vendas-sensores-line-chart', lineData, lineLayout);

                // Dados para o gráfico de barras de vendas por funcionário
                var funcionarios = @Html.Raw(Json.Serialize(Model.Funcionarios));
                var vendasPorFuncionario = sensores.reduce((acc, sensor) => {
                    var login = funcionarios.find(func => func.id === sensor.id_func).login_func;
                    acc[login] = (acc[login] || 0) + 1;
                    return acc;
                }, {});

                var barData = [{
                    x: Object.keys(vendasPorFuncionario),
                    y: Object.values(vendasPorFuncionario),
                    type: 'bar',
                    name: 'Quantidade de Sensores Vendidos'
                }];

                var barLayout = {
                    title: 'Quantidade de Sensores Vendidos por Funcionário',
                    xaxis: { title: 'Login Funcionário' },
                    yaxis: { title: 'Quantidade de Sensores' }
                };

                Plotly.newPlot('vendas-funcionarios-bar-chart', barData, barLayout);

                // Dados para o gráfico de barras horizontais empilhadas
                var vendasPorTipoFuncionario = sensores.reduce((acc, sensor) => {
                    var login = funcionarios.find(func => func.id === sensor.id_func).login_func;
                    acc[login] = acc[login] || { LUMINOSIDADE: 0, TEMPERATURA: 0, UMIDADE: 0 };
                    acc[login][sensor.ds_tipo_sens.toUpperCase()] += 1;
                    return acc;
                }, {});

                var traceLuminosidade = {
                    y: Object.keys(vendasPorTipoFuncionario),
                    x: Object.values(vendasPorTipoFuncionario).map(func => func.LUMINOSIDADE),
                    name: 'LUMINOSIDADE',
                    type: 'bar',
                    orientation: 'h'
                };

                var traceTemperatura = {
                    y: Object.keys(vendasPorTipoFuncionario),
                    x: Object.values(vendasPorTipoFuncionario).map(func => func.TEMPERATURA),
                    name: 'TEMPERATURA',
                    type: 'bar',
                    orientation: 'h'
                };

                var traceUmidade = {
                    y: Object.keys(vendasPorTipoFuncionario),
                    x: Object.values(vendasPorTipoFuncionario).map(func => func.UMIDADE),
                    name: 'UMIDADE',
                    type: 'bar',
                    orientation: 'h'
                };

                var barStackedData = [traceLuminosidade, traceTemperatura, traceUmidade];

                var barStackedLayout = {
                    title: 'Quantidade de Sensores Vendidos por Tipo de Sensor',
                    barmode: 'stack',
                    xaxis: { title: 'Quantidade' },
                    yaxis: { title: 'Login Funcionário' }
                };

                Plotly.newPlot('vendas-tipo-sensores-bar-chart', barStackedData, barStackedLayout);
            });
        </script>
    </div>
</body>
</html>
